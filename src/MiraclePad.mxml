<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							firstView="views.MiraclePadHomeView" resizeForSoftKeyboard="true" applicationComplete="initApp(event)">
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		
		@media(os-platform:"IOS") {
			s|ActionBar {
				defaultButtonAppearance:beveled;
			}
			
			s|ActionBar.beveled s|Group#navigationGroup s|Button {
				skinClass: ClassReference("spark.skins.mobile.BeveledActionButtonSkin");
			}
		}
		
		s|ActionBar {
			chromeColor: #333333;
			color: #FFFFFF;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.seesmic.as3.xmpp.StreamEvent;
			import com.seesmic.as3.xmpp.XMPP;
			import com.seesmic.as3.xmpp.XMPPEvent;
			import com.seesmic.as3.xmpp.xep.muc.MUC;
			
			import listeners.LoginAcceptedEvent;
			
			import mx.events.FlexEvent;
			import mx.utils.UIDUtil;
			
			import views.MiraclePadHomeView;
			import views.TweetView;
			
			protected static var colorDico:Dictionary;
			
			public var _conn:XMPP = null;
			private var _currentGroup:Object;
			private var _chosenEnergyID:String = null;
			private var _chosenEnergyString:String = null;
			private var _hashTags:Array = null;
			private var _shouldExit:Boolean = false;
			
			/**
			 *
			 * Called when application creation is complete
			 * 
			 **/
			protected function initApp(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'LOGIN_ACCEPTED'), handleLoginAccepted);
				this.addEventListener(resourceManager.getString('resources', 'LOGOUT'), handleLogout);
				this.addEventListener(resourceManager.getString('resources', 'RESET_ENERGY'), handleResetEnergy);
			}
			
			/**
			 *
			 * Event handling method to display tweets fullscreen 
			 * 
			 **/
			protected function handleResetEnergy(evt:Event):void {
				if(_chosenEnergyID != null) {
					var upurlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/energySources");
					upurlRequest.method = URLRequestMethod.PUT;
					upurlRequest.contentType = "application/json";
					
					var statusObject:Object = new Object();
					statusObject.stat = "reset";
					statusObject.id = _chosenEnergyID;
					statusObject.token = "";
					
					upurlRequest.data = com.adobe.serialization.json.JSON.encode(statusObject);
					var uploader:URLLoader = new URLLoader();
					uploader.addEventListener(HTTPStatusEvent.HTTP_STATUS, handleEnergyResetComplete);
					uploader.load(upurlRequest);
				}
			}
			
			/**
			 *
			 * Event handling method when the reset energy call is completed 
			 * 
			 **/
			protected function handleEnergyResetComplete(evt:HTTPStatusEvent):void {
				_chosenEnergyID = null;
				_chosenEnergyString = null;
				navigator.pushView(MiraclePadHomeView, null, null, null);
			}
			
			/**
			 *
			 * Event handling method when login is OK
			 * 
			 **/
			protected function handleLoginAccepted(evt:LoginAcceptedEvent):void {
				//this needs to be assigned before we change the application's state
				_chosenEnergyID = evt.energyId;
				_chosenEnergyString = evt.energyTitle;
				_hashTags = evt.hashTags;
				colorDico = evt.colorDico;
				_currentGroup = evt.selectedGroup;
				prepareXMPPConnection(new String(_currentGroup.title).toLowerCase());
			}
			
			/**
			 *
			 * Event handling method for logout
			 * 
			 **/
			protected function handleLogout(evt:Event):void {
				//let's warn the message room that this is going off
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_LOGGING_OFF");
				_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"tag":"'+_chosenEnergyString+'", "messageType":"'+resourceManager.getString('resources', 'IPAD_SESSION_DISCONNECT')+'"}', null);
								
				//this needs to be assigned before we change the application's state
				_currentGroup = null;
				_conn.disconnect();
				_conn = null;
				dispatchEvent(new Event(resourceManager.getString('resources', 'RESET_ENERGY'), true));
			}
			
			/**
			 *
			 * Function to instantiate a XMPP connection
			 * 
			 **/
			protected function prepareXMPPConnection(grpName:String):void {
				_conn = new XMPP();
				_conn.auto_reconnect = true;
				_conn.setJID(grpName+"@"+resourceManager.getString('resources', 'XMPP_SERVER')+"/"+UIDUtil.createUID());
				_conn.setPassword(resourceManager.getString('resources', 'XMPP_CLIENT_DEFAULT_PASSWORD'));
				_conn.setServer(resourceManager.getString('resources', 'XMPP_SERVER'));
				_conn.addEventListener(XMPPEvent.SESSION, handleSession);
				_conn.socket.addEventListener(StreamEvent.CONNECT_FAILED, handleConnectFailed);
				_conn.addPlugin(new MUC());
				_conn.connect();
			}
			
			/**
			 *
			 * Event handling method for StreamEvent.CONNECT_FAILED
			 * 
			 **/
			protected function handleConnectFailed(e:StreamEvent):void {
				trace("The connection with the messaging server failed. The application will not load.");
				_conn.cancelReconnectionTimer();
			}
			
			/**
			 *
			 * Event handling method for XMPP session
			 * 
			 **/
			protected final function handleSession(e:XMPPEvent):void {
				_conn.sendPresence();
				_conn.plugin['muc'].joinRoom('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), new String(_currentGroup.title).toLowerCase()+"-"+UIDUtil.createUID());
				var ctx:Object = new Object();
				ctx.currentGroup = _currentGroup;
				ctx.hashTags = _hashTags;
				ctx.chosenEnergyString = _chosenEnergyString;
				navigator.pushView(TweetView, _conn, ctx, null);
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_LOGIN:{\"group\":"+_currentGroup.title+"}");
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_ENERGY_SELECTED:{\"energy\":"+_chosenEnergyString+"}");
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_ENTERING_TWEET_VIEW");
			}
			
			/**
			 *
			 * Static function to return color codes
			 * 
			 **/
			public static function getColorBasedOnGroup(groupName:String):uint {
				return colorDico[groupName];
			}
		]]>
	</fx:Script>
</s:ViewNavigatorApplication>
