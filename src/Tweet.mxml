<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="creationCompleteHandler(event)" minHeight="30" cornerRadius="5" mouseChildren="false">
	
	<fx:Declarations>
		<fx:Object id="data" />
		
		<fx:Component className="HideCallout">
			<s:Callout horizontalPosition="end" verticalPosition="after">
				<s:VGroup paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalAlign="center">
					<s:Label width="100%" text="Are you sure to delete this tweet?" textAlign="center" />
					<s:HGroup>
						<s:Button label="YES" click="close(true, true);"/>
						<s:Button label="NO" click="close(true, false);"/>
					</s:HGroup>
				</s:VGroup>
			</s:Callout>        
		</fx:Component>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.seesmic.as3.xmpp.XMPP;
			
			import listeners.TweetUpdaterEvent;
			import listeners.TweetsRefreshEvent;
			
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			import spark.events.PopUpEvent;
			
			private var oldX:Number;
			private var oldY:Number;
			
			private var _conn:XMPP;
			
			private var refreshTimer:Number;
			private var longTapTimer:Number;
			
			[Bindable] private var ownerColor:uint;
			
			/**
			 *
			 * Called when itemrenderer creation is complete
			 * 
			 **/
			protected function creationCompleteHandler(event:FlexEvent):void {
				//enables touches on the ipad
				Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
				
				//set width, x and y dynamically
				this.width = this.parent.width*.2;
				this.x = (data.xpos*this.parent.width) / 100;
				this.y = (data.ypos*(this.parent.height+45)) / 100;
				
				//set the correct color based on groupname
				this.backgroundFill = new SolidColor(MiraclePad.getColorBasedOnGroup(data.userName));
				
				//make this thingy draggable and double-tappable
				enableListeners(true);
				
				//check if current group is the owner
				if(data.userName != data.ownerName) {
					ownerColor = MiraclePad.getColorBasedOnGroup(data.ownerName);
					this.currentState = "isNotOwner";
				}
			}
			
			/**
			 *
			 * Function to enable/disable listeners
			 * 
			 **/
			protected function enableListeners(b:Boolean):void {
				//quick switch to add/remove listeners
				if(b) {
					if(Multitouch.supportsTouchEvents) {
						this.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);
						this.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);
						this.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);
						/*this.addEventListener(GestureEvent.GESTURE_TWO_FINGER_TAP, onDoubleTap);*/
					}
					else {
						this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, false);
						this.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, false);
					}
				}
				else {
					if(Multitouch.supportsTouchEvents) {
						this.removeEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);
						this.removeEventListener(TouchEvent.TOUCH_END, onTouchEnd);
						this.removeEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);
						/*this.removeEventListener(GestureEvent.GESTURE_TWO_FINGER_TAP, onDoubleTap);*/
					}
					else {
						this.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
						this.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					}
				}
			}
			
			/**
			 *
			 * Called when a finger touches this component
			 * 
			 **/
			protected function onTouchBegin(evt:TouchEvent):void {
				//we log the old X and Y, in case the service cannot accept the move
				oldX = this.x;
				oldY = this.y;
				
				//start dragging
				this.startTouchDrag(evt.touchPointID, false, getAreaBoundaries());
				
				//bump component to the top (Z)
				(this.parent as Group).setElementIndex(this, (this.parent as Group).numElements-1);
				
				//if another finger is detected, show the callout
				if(!evt.isPrimaryTouchPoint) {
					this.stopTouchDrag(evt.touchPointID);
					showCallOut();
				}
			}
			
			/**
			 *
			 * Called when a finger leaves this component
			 * 
			 **/
			protected function onTouchEnd(evt:TouchEvent):void {
				//stop dragging
				this.stopTouchDrag(evt.touchPointID);
				
				//set the background color back to full
				evt.target.alpha = 1;
				
				//only if the current position has changed, update the tweet
				if(oldX != this.x || oldY != this.y) {
					data.xpos = Math.floor((this.x * 100) / this.parent.width);
					data.ypos = Math.floor((this.y * 100) / (this.parent.height+45));
					
					updateTweet();
				}
			}
			
			/**
			 *
			 * Called when this component moves
			 * 
			 **/
			protected function onTouchMove(evt:TouchEvent):void {
				//dimm the background a tad
				evt.target.alpha = 0.5;
			}
			
			/**
			 *
			 * Function to return this tweets' container dimensions
			 * 
			 **/
			protected function getAreaBoundaries():Rectangle {
				return new Rectangle(0, 0, this.parent.width-this.width, this.parent.height-this.height);
			}
			
			/**
			 *
			 * Function to pop the callout
			 * 
			 **/
			protected function showCallOut():void {
				//only happens in screen debugging
				clearInterval(longTapTimer);
				this.stopDrag();
				
				//create and show the callout
				var hideCallout:HideCallout = new HideCallout();
				hideCallout.addEventListener(PopUpEvent.CLOSE, handleCalloutClose);
				hideCallout.open(this, true);
			}
			
			/**
			 *
			 * Function called when the callout closes
			 * 
			 **/
			protected function handleCalloutClose(evt:PopUpEvent):void {
				var answerFromCallOut:Boolean = evt.data as Boolean;
				
				//if the answer is yes, hide this tweet
				if(answerFromCallOut) {
					data.isVisible = false;
					updateTweet();
				}
			}
			
			/**
			 *
			 * Called when mouse is pressed on this item
			 * 
			 **/
			protected function mouseDownHandler(event:MouseEvent):void {
				//bump to top
				(this.parent as Group).setElementIndex(this, (this.parent as Group).numElements-1);
				
				longTapTimer = setInterval(showCallOut, 2000);
				
				//we log the old X and Y, in case the service cannot accept the move
				oldX = this.x;
				oldY = this.y;
				
				//start dragging
				this.startDrag(false, getAreaBoundaries());
			}
			
			/**
			 *
			 * Called when mouse is released on this item
			 * 
			 **/
			protected function mouseUpHandler(event:MouseEvent):void {
				//stop dragging
				this.stopDrag();
				
				clearInterval(longTapTimer);
				
				//update the new position with the server
				if(oldX != this.x || oldY != this.y) {
					data.xpos = Math.floor((this.x * 100) / this.parent.width);
					data.ypos = Math.floor((this.y * 100) / (this.parent.height+45));
					
					updateTweet();
				}
			}
			
			/**
			 *
			 * Function to call and update this tweet
			 * 
			 **/
			protected function updateTweet():void {
				//disable all listeners (this thing can't be dragged anymore)
				enableListeners(false);
				
				//update and listen for success
				var tu:TweetUpdater = new TweetUpdater();
				tu.addEventListener(TweetUpdaterEvent.UPDATE_SUCCESSFUL, handleUpdateSuccessful);
				tu.addEventListener(TweetUpdaterEvent.UPDATE_FAILED, handleUpdateFailure);
				tu.postTweetToService(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/tweet", data);
			}
			
			/**
			 *
			 * Called when the tweetUpdater is successful
			 * 
			 **/
			protected function handleUpdateSuccessful(evt:TweetUpdaterEvent):void {
				//dispatch XMPP message so that all clients refresh automatically
				
				var tt:Object = new Object();
				tt.tweetId = data.id;
				tt.text = extractText(data.text);
				tt.xpos = data.xpos;
				tt.ypos = data.ypos;	
				
				var tre:TweetsRefreshEvent = new TweetsRefreshEvent(resourceManager.getString('resources', 'DISPATCH_REFRESH_TWEETS'), true);
				tre.log = true;
				tre.twt = tt;
				
				dispatchEvent(tre);
				
				enableListeners(true);	
			}
			
			
			/**
			 *
			 * Called when the tweetUpdater fails
			 * 
			 **/
			protected function handleUpdateFailure(evt:TweetUpdaterEvent):void {
				//something went wrong with the service, reposition the item to its last known position
				this.x = oldX;
				this.y = oldY;
				enableListeners(true);
			}
			
			/**
			 *
			 * Function to extract the text from the JSON body
			 * 
			 **/
			protected function extractText(bdy:String):String {
				var txt:String = "";
				
				try {
					var res:Object = com.adobe.serialization.json.JSON.decode(bdy);
					txt = new String(res.text);
				}
				catch(error:Error) {
				}
				
				return txt;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="isOwner" />
		<s:State name="isNotOwner" />
	</s:states>
	
	<s:HGroup left="10" right="10" top="10" bottom="10">
		<s:Rect width="10" height="10" includeIn="isNotOwner">
			<s:fill>
				<s:SolidColor color="{ownerColor}" />
			</s:fill>
		</s:Rect>
		<s:Label text="{extractText(data.text)}" color="#FFFFFF" width="100%" textAlign="left" />
	</s:HGroup>
</s:BorderContainer>
