<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title.feed="TWEETS" title.portfolio="PRESENTASJON" creationComplete="initView(event)" destructionPolicy="auto">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.seesmic.as3.xmpp.JID;
			import com.seesmic.as3.xmpp.XMPP;
			import com.seesmic.as3.xmpp.XMPPEvent;
			
			import listeners.RetweetEvent;
			import listeners.TweetsRefreshEvent;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			
			import spark.components.CheckBox;
			import spark.core.NavigationUnit;
			
			public var _conn:XMPP;
			private var _currentGroup:Object;
			private var _hashEnergies:Array;
			private var _chosenEnergyString:String;
			
			[Bindable] public var tweetOwner:String;
			
			private var timeoutInterval:Number;
			
			/**
			 * 
			 * init function for this view container
			 * 
			 **/
			protected function initView(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'DISPATCH_REFRESH_TWEETS'), dispatchRefreshTweetHandler);
				this.addEventListener(resourceManager.getString('resources', 'RE_TWEET'), handleReTweet);
				
				_currentGroup = navigator.context.currentGroup;
				_hashEnergies = navigator.context.hashTags;
				_chosenEnergyString = navigator.context.chosenEnergyString;
				tweetOwner = new String(_currentGroup.title).toLowerCase();
				_conn = XMPP(data);
				_conn.addEventListener(XMPPEvent.MESSAGE_MUC, handleMUCMessage);
				_conn.plugin['muc'].joinRoom('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_ROOM_NAME'), new String(_currentGroup.title).toLowerCase()+"-"+UIDUtil.createUID());
				_conn.plugin['muc'].joinRoom('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), new String(_currentGroup.title).toLowerCase()+"-"+UIDUtil.createUID());
			
				buildFilters();
			}
			
			/**
			 * 
			 * Event handling function for DISPATCH_REFRESH_TWEETS
			 * 
			 **/
			protected function dispatchRefreshTweetHandler(evt:TweetsRefreshEvent):void {
				if(evt.log) {
					XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_DRAG_TWEET:"+com.adobe.serialization.json.JSON.encode(evt.twt));
				}
				
				
				//using the message room to let all clients know
				//_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"userName":"'+new String(_currentGroup.title).toLowerCase()+'", "messageType":"'+resourceManager.getString('resources', 'TWEET_POST_SUCCESSFUL')+'"}', null);
				_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"tag":"'+_chosenEnergyString+'", "messageType":"'+resourceManager.getString('resources', 'TWEET_POST_SUCCESSFUL')+'"}', null);
			}
			
			/**
			 * 
			 * Event handling method for MUCMessages
			 * 
			 **/
			protected function handleMUCMessage(evt:XMPPEvent):void {
				if(!evt.stanza.body) {
					return;
				}
				
				var al:Number = 1;
				
				var xm:XML = evt.stanza.xml as XML;
				for each (var i:XML in xm.elements()) {
					if(i.name() == "urn:xmpp:delay::delay") {
						al = .5;
					}
				}
				
				switch(new String(evt.stanza.from.user)) {
					case resourceManager.getString('resources', 'TWEETS_ROOM_NAME'):
						var roomjid:JID = JID(evt.stanza.from);
						
						tweetFeedArray.addItem({bdy: evt.stanza.body, from: cleanResource(roomjid.getResource()), al: al, visible: true, tags: getTagsForContent(evt.stanza.body)});
						
						if(al == 1) {
							//XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "NEW_TWEET: "+evt.stanza.body);
						}
						
						refreshFeed();
						break;
					
					case resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'):
						var res:Object = com.adobe.serialization.json.JSON.decode(String(evt.stanza.body));
						//if(res.userName == new String(_currentGroup.title).toLowerCase() && res.messageType == resourceManager.getString('resources', 'TWEET_POST_SUCCESSFUL')) {
						if(res.tag == _chosenEnergyString && res.messageType == resourceManager.getString('resources', 'TWEET_POST_SUCCESSFUL') && al == 1) {
							loadTweets();
						}
						
						if(res.tag == _chosenEnergyString && res.messageType == resourceManager.getString('resources', 'IPAD_SESSION_ACCEPTED') && al == 1) {
							clearInterval(timeoutInterval);
							bi.visible = false;
						}
						
						if(res.tag == _chosenEnergyString && res.messageType == resourceManager.getString('resources', 'IPAD_SESSION_DISCONNECT') && al == 1) {
							resetApp();
						}
						
						break;
				}
						
			}
			
			/**
			 * 
			 * Function to return a clean "from" user (without '-pad')
			 * 
			 **/
			protected function cleanResource(initialFrom:String):String {
				initialFrom = initialFrom.split("-")[0];
				return initialFrom;
			}
			
			/**
			 * 
			 * extract the tags from the tweet content
			 * 
			 **/
			protected function getTagsForContent(message:String):Array {
				var tags:Array = new Array();
				
				for each (var tag:String in _hashEnergies) {
					if(message.indexOf(tag) > -1) {
						tags.push(tag.substr(1));
					}
				}
				
				return tags;
			}
			
			/**
			 * 
			 * update the list of displayed tweets in the livefeed based on hash filters
			 * 
			 **/
			public function refreshFeed():void {
				var tweetsToDisplay:ArrayCollection = new ArrayCollection();
				for each (var tweet:Object in tweetFeedArray) {
					tweet.currentGroup = _currentGroup;
					if(hashTags.length > 0) {
						for each (var tag:String in hashTags) {
							if((tweet.tags as Array).indexOf(tag) > -1 && !tweetsToDisplay.contains(tweet)) {
								tweetsToDisplay.addItem(tweet);
							}
						}	
					}
					else {
						tweetsToDisplay.addItem(tweet);
					}
				}
				
				liveFeedList.dataProvider = tweetsToDisplay;
				scrollToBottom();
			}
			
			/**
			 * 
			 * public function to force scroll down on the list component
			 * 
			 **/
			protected function scrollToBottom():void {
				var delta:Number = 0;
				var count:int = 0;
				
				while (count++ < 10){
					liveFeedList.validateNow();
					delta = liveFeedList.layout.getVerticalScrollPositionDelta(NavigationUnit.END);
					liveFeedList.layout.verticalScrollPosition += delta;
					
					if (delta == 0) {
						break;						
					}
				}
			}
			
			/**
			 * 
			 * build dynamically the filters on creation complete
			 * 
			 **/
			protected function buildFilters():void {
				var cb:CheckBox;
				for each (var referenceHash:String in _hashEnergies) {
					cb = new CheckBox();
					filterGroup.addElement(cb);
					cb.label = referenceHash.substr(1);
					cb.setStyle("color", 0xFFFFFF);
					cb.addEventListener(Event.CHANGE, handleHashTag);
				}
			}
			
			/**
			 * 
			 * handles opening and closing the hash drawer
			 * 
			 **/
			protected function handleHashTag(event:Event):void {
				var tag:String = event.currentTarget.content;
				
				if(event.currentTarget.selected) {
					hashTags.addItem(tag);
					XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_FILTER_ON:"+tag);
				}
				else {
					hashTags.removeItemAt(hashTags.getItemIndex(tag));
					XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_FILTER_OFF:"+tag);
				}
				
				refreshFeed();
			}
			
			/**
			 * 
			 * handles send tweet event
			 * 
			 **/
			protected function sendTweet():void {
				var params:Object = new Object();
				params.ownerName = tweetOwner;
				params.text = wordInput.text;				
				
				_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_ROOM_NAME'), com.adobe.serialization.json.JSON.encode(params), "sciwork");
				wordInput.text = "";				
				tweetOwner = new String(_currentGroup.title).toLowerCase();
				
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "NEW_TWEET:"+com.adobe.serialization.json.JSON.encode(params));
			}
			
			/**
			 * 
			 * Error handling method for getTweets service
			 * 
			 **/
			protected function getTweets_faultHandler(event:FaultEvent):void {
				trace("An error occured while retrieving the tweets from the server.");
			}
			
			/**
			 *
			 * Result handling method for getTweets service 
			 * 
			 **/
			protected function getTweets_resultHandler(event:ResultEvent):void {
				if(event.result != "") {
					var tweetsForGroup:Array = com.adobe.serialization.json.JSON.decode(String(event.result));
					var tempArray:Array = new Array();
					
					//build the correct arrays
					var tweet:Tweet;
					var tweetObject:Object;
					for each (var twt:Object in tweetsForGroup) {
						tweet = new Tweet();
						tweet.data = twt;
						
						//need to see if tweet is visisble
						if(twt.isVisible) {
							//place the tweets in the view
							//tweetsContainer.addElement(tweet);
							tempArray.push(tweet);
						}
					}
					
					if(this.currentState == "portfolio") {
						tweetsContainer.removeAllElements();
						for each (var visibleTweet:Tweet in tempArray) {
							tweetsContainer.addElement(visibleTweet);	
						}
					}
				}			
			}
			
			/**
			 *
			 * Function to call service to load tweets 
			 * 
			 **/
			protected function loadTweets():void {
				getTweets.url = resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/tweet/" + _chosenEnergyString;
				getTweets.send();
			}
			
			/**
			 *
			 * Event handling method for RE_TWEET 
			 * 
			 **/
			protected function handleReTweet(evt:RetweetEvent):void {
				this.tweetOwner = evt.originGroup;
				wordInput.text = evt.tweetContent;
			}
			
			protected function shareView(event:Event):void {
				if(event.target.selected) {
					bi.visible = true;
					_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"tag":"'+_chosenEnergyString+'", "messageType":"'+resourceManager.getString('resources', 'IPAD_SESSION_REQUEST')+'"}', null);
					timeoutInterval = setInterval(resetApp, 5000);
					XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_SHARE_SCREEN_ON");
				}
				else {
					_conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"tag":"'+_chosenEnergyString+'", "messageType":"'+resourceManager.getString('resources', 'IPAD_SESSION_DISCONNECT')+'"}', null);
				}
			}
			
			protected function resetApp():void {
				shareButton.selected = false;
				bi.visible = false;
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_SHARE_SCREEN_OFF");
				clearInterval(timeoutInterval);
			}
			
			protected function button1_clickHandler(event:MouseEvent):void {
				var wrongPassCallout:testCO = new testCO();
				wrongPassCallout.open(oppgaveButton1, true);
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_TWEET_DESCRIPTION_OPEN");
			}
			
			protected function oppgaveButton1_creationCompleteHandler(event:FlexEvent):void {
				var wrongPassCallout:testCO = new testCO();
				wrongPassCallout.open(oppgaveButton1, true);
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_TWEET_DESCRIPTION_OPEN");
			}
			
			protected function button2_clickHandler(event:MouseEvent):void {
				var wrongPassCallout:testCO2 = new testCO2();
				wrongPassCallout.open(oppgaveButton2, true);
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_PRESENTATION_DESCRIPTION_OPEN");
			}
			
			protected function oppgaveButton2_creationCompleteHandler(event:FlexEvent):void {
				var wrongPassCallout:testCO2 = new testCO2();
				wrongPassCallout.open(oppgaveButton2, true);
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_PRESENTATION_DESCRIPTION_OPEN");
			}
			
			protected function enterTwt():void {
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_ENTERING_TWEET_VIEW");
			}
			
			protected function enterPres():void {
				XMPPLogger.info(_conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_ENTERING_PRESENTATION_VIEW");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection id="tweetFeedArray" />
		<s:ArrayCollection id="hashTags" />
		<s:HTTPService method="GET" headers="{'pragma', 'no-cache'}" result="getTweets_resultHandler(event)" fault="getTweets_faultHandler(event)" resultFormat="text" id="getTweets" showBusyCursor="true" />
	
		<fx:Component className="testCO">
			<s:Callout horizontalPosition="start" verticalPosition="after">
				
				<fx:Script>
					<![CDATA[
						protected function button3_clickHandler(event:MouseEvent):void {
							XMPPLogger.info((this.parentDocument as MiraclePad)._conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_TWEET_DESCRIPTION_CLOSE");
							close();
						}
					]]>
				</fx:Script>
				
				<s:VGroup width="500" paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalAlign="center">
					<s:Label width="100%">
						<s:text>Gå i utstillingen. Svar på så mange av disse spørsmålene dere klarer, og finn gjerne andre fakta om bærekraftig utvikling også: Hvilke fordeler og ulemper har energikilden? Er det lokale ulemper ved å utnytte energikilden? Er det andre interessekonflikter knyttet til denne kilden? Er den en ‘ren’ energikilde? Peker den seg ut som framtidens energiform? Hvordan inngår energikilden i forhold til lagring, transport og bruk?
Skriv korte ‘tweets’, og husk å hash-tagge deres energikilde (#atomkraft, #bioenergi, #bølgekraft, #sol, #vann, #vind)</s:text>
					</s:Label>
					<s:Button label="OK" click="button3_clickHandler(event)"/>
				</s:VGroup>
			</s:Callout>    
		</fx:Component>
		
		<fx:Component className="testCO2">
			<s:Callout horizontalPosition="start" verticalPosition="after">
				
				<fx:Script>
					<![CDATA[
						protected function button4_clickHandler(event:MouseEvent):void {
							XMPPLogger.info((this.parentDocument as MiraclePad)._conn, 'conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'LOG_ROOM_NAME'), "IPAD_PRESENTATION_DESCRIPTION_CLOSE");
							close();
						}
					]]>
				</fx:Script>
				
				<s:VGroup width="500" paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalAlign="center">
					<s:Label width="100%">
						<s:text>Bruk om lag 10 minutter på å organisere tweetsene som er sendt inn om deres energikilde. Bruk "PRESENTASJON" modus til dette. Diskuter kort hva dere vil legge frem i plenumssituasjonen.</s:text>
					</s:Label>
					<s:Button label="OK" click="button4_clickHandler(event)"/>
				</s:VGroup>
			</s:Callout>    
		</fx:Component>
	</fx:Declarations>
	
	<s:states>
		<s:State name="feed" />
		<s:State name="portfolio" enterState="loadTweets()" />
	</s:states>
	
	<s:navigationContent>
		<s:Button includeIn="feed" label="PRESENTASJON" click="this.currentState='portfolio';enterPres()" />
		<s:Button includeIn="portfolio" label="TWEETS" click="this.currentState='feed';enterTwt()"/>
		<s:Spacer width="15" includeIn="portfolio" />
		<s:HGroup id="shareGroup" includeIn="portfolio" verticalAlign="baseline" >
			<s:Label color="#FFFFFF" text="DEL SKJERM:" fontSize="11"/>
			<s:ToggleSwitch id="shareButton" change="shareView(event)" skinClass="itemRenderers.MiracleToggleSkin" />
		</s:HGroup>
	</s:navigationContent>
	
	<s:titleContent>
		<s:Label color="#FFFFFF" text="{this.title}" textAlign="center" width="100%" fontWeight="bold" />
	</s:titleContent>
	
	<s:actionContent>
		<s:Spacer width="100" includeIn="portfolio" />
		<s:Button label="OPPGAVE" id="oppgaveButton1" includeIn="feed" click="button1_clickHandler(event)" creationComplete="oppgaveButton1_creationCompleteHandler(event)" />
		<s:Button label="OPPGAVE" id="oppgaveButton2" includeIn="portfolio" click="button2_clickHandler(event)" creationComplete="oppgaveButton2_creationCompleteHandler(event)" />
		<s:Spacer width="10" />
		<s:Button label="LOGG UT" click="dispatchEvent(new Event(resourceManager.getString('resources', 'LOGOUT'), true))" />
	</s:actionContent>
	
	<s:HGroup width="100%" height="100%" includeIn="feed">
		<s:BorderContainer width="250" height="100%" backgroundColor="#333333" skinClass="skins.hashPanelHeaderSkin">
			<s:VGroup top="15" left="15" right="15" bottom="15">
				<s:Label width="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" text="Filters:" color="#FFFFFF" textDecoration="underline" />
				<s:VGroup id="filterGroup" width="100%" gap="15" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
			</s:VGroup>
		</s:BorderContainer>
		<s:VGroup width="100%" height="100%">
			<s:List id="liveFeedList" width="100%" height="100%" selectionColor="#FFFFFF" horizontalScrollPolicy="off" borderVisible="false" itemRenderer="itemRenderers.TweetItem" >
				<s:layout>
					<s:VerticalLayout gap="2" horizontalAlign="contentJustify" variableRowHeight="true" />
				</s:layout>
			</s:List>
			<s:HGroup width="100%" gap="10" verticalAlign="middle" paddingBottom="10" paddingLeft="5" paddingRight="10">
				<s:Button label="#" width="50" chromeColor="{MiraclePad.getColorBasedOnGroup(new String(_currentGroup.title).toLowerCase())}" buttonMode="true" click="wordInput.text = wordInput.text+'#';wordInput.setFocus()" />
				<s:TextInput id="wordInput" width="100%" height="{sender.height}" maxChars="140" />
				<s:Button id="sender" enabled="{wordInput.text.length > 0}" width="100" label="LAGRE" chromeColor="{MiraclePad.getColorBasedOnGroup(new String(_currentGroup.title).toLowerCase())}" buttonMode="true" click="sendTweet()" />
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	
	<s:Group width="100%" height="100%" includeIn="portfolio" id="tweetsContainer" />
	
	<s:BorderContainer visible="false" width="100%" height="100%" backgroundColor="#333333" backgroundAlpha=".7" id="bi">
		<s:BusyIndicator width="50" height="50" horizontalCenter="0" verticalCenter="0" symbolColor="#FFFFFF" />
	</s:BorderContainer>
</s:View>
