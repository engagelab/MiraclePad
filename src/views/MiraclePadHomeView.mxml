<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="MiraclePad Login" creationComplete="{getAllGroups.send()}" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import listeners.LoginAcceptedEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			[Bindable] private var _groupList:ArrayCollection;
			
			private var colorDico:Dictionary;
			
			/**
			 *
			 * Result handling method for getAllGroups service 
			 * 
			 **/
			protected function getAllGroups_resultHandler(event:ResultEvent):void {
				//store the returned object as JSON 
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				
				//instantiate and build group array
				_groupList = new ArrayCollection();
				colorDico = new Dictionary();
				for each (var act:Object in res) {
					_groupList.addItem({title: act.name, id: act.id, colour: act.colour});
					colorDico[cleanGroupName(new String(act.name).toUpperCase()).toLowerCase()] = act.colour;
				}
				
				//ordering the list alphabetically
				var sortfield:SortField = new SortField();
				sortfield.name = "title";
				sortfield.descending = false;
				
				var sort:Sort = new Sort();
				sort.fields = [sortfield];
				
				_groupList.sort = sort;
				_groupList.refresh();
			}
			
			/**
			 *
			 * Method to return to 'clean' groupname (replace norwegian charac) 
			 * 
			 **/
			protected function cleanGroupName(name:String):String {
				return name.replace("Å","A").replace("Ø", "O").replace("Æ", "AE");
			}
			
			/**
			 *
			 * Error handling method for getAllGroups service 
			 * 
			 **/
			protected function getAllGroups_faultHandler(event:FaultEvent):void {
				trace("An error occured while retrieving group names from the server.");
			}
			
			/**
			 *
			 * Handles click on LOG IN button 
			 * 
			 **/
			protected function validateBeforeLoggingIn():void {
				//validate the combo
				if(groupPass.text.length > 0) {
					submitForm();					
				}
				else {
					var tooShortPassCallout:TooShortPassCallout = new TooShortPassCallout();
					tooShortPassCallout.open(groupPass, true);
				}
			}
			
			/**
			 *
			 * Called if the passwordValidator is valid
			 * 
			 **/
			protected function submitForm():void {
				bi.visible = true;
				var params:Object = new Object();
				params.groupId = (groupCombo.selectedItem as Object).id;
				params.password = groupPass.text;
				
				var urlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'SERVER_URL')+'/connect');
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.contentType = "application/json";
				urlRequest.data = com.adobe.serialization.json.JSON.encode(params);
				var loginService:URLLoader = new URLLoader();
				loginService.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				loginService.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				loginService.load(urlRequest);
			}
			
			/**
			 *
			 * Handles response from the loginService 
			 * 
			 **/
			protected function httpStatusHandler(ev:HTTPStatusEvent):void {
				
				//analyse returned status code
				switch(ev.status) {
					case 0:
						//service not available
						trace("The login service is not available. Please contact your administrator.");
						break;
					case 200:
						//login OK, password accepted
						this.currentState = "energies";
						refreshEnergies();
						break;
					case 401:
						//login not OK, wrong password
						trace("The password is not valid.");
						var wrongPassCallout:WrongPassCallout = new WrongPassCallout();
						wrongPassCallout.open(groupPass, true);
						groupPass.text = "";
						bi.visible = false;
						break;
				}
			}
			
			/**
			 *
			 * Handles ioError from the loginService 
			 * 
			 **/
			private function ioErrorHandler(ev:IOErrorEvent):void {
				bi.visible = false;
				trace(ev.errorID);
			}
			
			protected function getEnergies_faultHandler(event:FaultEvent):void {
				trace("An error occurred ");
			}
			
			protected function getEnergies_resultHandler(event:ResultEvent):void {
				bi.visible = false;
				
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				var b:Button;
				var nrjs:ArrayCollection = new ArrayCollection();
				hashTags = new Array();
				for each (var nrj:Object in res) {
					b = new Button();
					b.name = nrj.id;
					b.label = nrj.energy;
					hashTags.push("#"+nrj.energy);
					b.width = 200;
					b.height = 50;
					b.addEventListener(MouseEvent.CLICK, pickEnergy);
					nrjs.addItem(b);
					
					if(nrj.inuse) {
						b.enabled = false;
					}
					else {
						b.enabled = true;
					}
				}
				
				var sortfield:SortField = new SortField();
				sortfield.name = "label";
				sortfield.descending = false;
				
				var sort:Sort = new Sort();
				sort.fields = [sortfield];
				
				nrjs.sort = sort;
				nrjs.refresh();
				
				for each (var sortedNrj:Button in nrjs) {
					energies.addElement(sortedNrj);
				}
			}
			
			protected function pickEnergy(evt:MouseEvent):void {
				bi.visible = true;
				
				var upurlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/energySources");
				upurlRequest.method = URLRequestMethod.PUT;
				upurlRequest.contentType = "application/json";
				
				var statusObject:Object = new Object();
				statusObject.stat = "pick";
				token = UIDUtil.createUID();
				statusObject.token = token;
				statusObject.id = new String(evt.currentTarget.name);
				
				upurlRequest.data = com.adobe.serialization.json.JSON.encode(statusObject);
				var uploader:URLLoader = new URLLoader();
				uploader.addEventListener(Event.COMPLETE, upcompleteHandler);
				uploader.load(upurlRequest);
			}
			
			private function upcompleteHandler(ev:Event):void {
				bi.visible = false;
				var res:Object = com.adobe.serialization.json.JSON.decode(String(ev.target.data));
				
				if(res.inuse && this.token == res.token) {
					var lae:LoginAcceptedEvent = new LoginAcceptedEvent(resourceManager.getString('resources', 'LOGIN_ACCEPTED'), true);
					lae.selectedGroup = groupCombo.selectedItem as Object;
					lae.selectedGroup.title = cleanGroupName(lae.selectedGroup.title);
					lae.energyId = res.id;
					lae.energyTitle = res.energy;
					lae.hashTags = hashTags;
					lae.colorDico = colorDico;
					dispatchEvent(lae);
				}
				else {
					refreshEnergies();
				}
			}
			
			private function refreshEnergies():void {
				energies.removeAllElements();
				getEnergies.send();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:HTTPService url="{resourceManager.getString('resources', 'SERVER_URL')+'/groupInfo'}" 
					   method="GET" result="getAllGroups_resultHandler(event)" fault="getAllGroups_faultHandler(event)" 
					   resultFormat="text" id="getAllGroups" />
		
		<s:HTTPService url="{resourceManager.getString('resources', 'TWEET_SERVER_URL') + '/energySources'}" 
					   method="GET" headers="{'pragma', 'no-cache'}" result="getEnergies_resultHandler(event)" fault="getEnergies_faultHandler(event)" resultFormat="text" id="getEnergies" showBusyCursor="true" />

		<fx:Component className="WrongPassCallout">
			<s:Callout horizontalPosition="after" verticalPosition="middle">
				<s:VGroup paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalAlign="center">
					<s:Label width="100%" text="The password is not valid." textAlign="center" />
					<s:Button label="Close" click="close()"/>
				</s:VGroup>
			</s:Callout>    
		</fx:Component>
		
		<fx:Component className="TooShortPassCallout">
			<s:Callout horizontalPosition="after" verticalPosition="middle">
				<s:VGroup paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" horizontalAlign="center">
					<s:Label width="100%" text="Please provide a password." textAlign="center" />
					<s:Button label="Close" click="close()"/>
				</s:VGroup>
			</s:Callout>    
		</fx:Component>
		
		<fx:String id="token" />
		<fx:Array id="hashTags" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="energies" />
	</s:states>
	
	<s:VGroup horizontalAlign="center" horizontalCenter="0" verticalCenter="0" includeIn="default">
		<s:HGroup verticalAlign="middle" width="100%" gap="15">
			<s:Label text="Group:" width="90" textAlign="right"/>
			<s:SpinnerListContainer>
				<s:SpinnerList id="groupCombo" dataProvider="{_groupList}" width="300" itemRenderer="itemRenderers.SpinnerLoginRenderer" />
			</s:SpinnerListContainer>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%" gap="15">
			<s:Label text="Password:" width="90" textAlign="right"/>
			<s:TextInput id="groupPass" text="password" displayAsPassword="true" width="100%"/>
		</s:HGroup>
		<s:Spacer height="20" />
		<s:Button label="LOG IN" click="validateBeforeLoggingIn()" />
	</s:VGroup>
	
	<s:TileGroup width="640" id="energies" includeIn="energies" horizontalCenter="0" verticalCenter="0" horizontalGap="20" verticalGap="20" />
	
	<s:BorderContainer visible="false" width="100%" height="100%" backgroundColor="#333333" backgroundAlpha=".7" id="bi">
		<s:BusyIndicator width="50" height="50" horizontalCenter="0" verticalCenter="0" symbolColor="#FFFFFF" />
	</s:BorderContainer>
</s:View>
